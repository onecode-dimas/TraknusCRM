<html>
<head>
    <title>Quotation Part Grid</title>
    <link rel="stylesheet" href="../WebResources/tss_/fonts/roboto/roboto_latin.css">
    <link rel="stylesheet" href="../WebResources/tss_/fonts/fontawesome/css/font_awesome.css">
    <link rel="stylesheet" href="../WebResources/tss_/library/buefy/buefy.min.css">
    <link rel="stylesheet" href="../WebResources/tss_gridsetting.css">
            
    <script type="text/javascript" src="../WebResources/ClientGlobalContext.js.aspx"></script>
    <script type="text/javascript" src="../WebResources/tss_/polyfill/babel_polyfill/polyfill.min.js"></script>
    <script type="text/javascript" src="../WebResources/tss_/library/bluebird/bluebird.min.js"></script>
    <script type="text/javascript" src="../WebResources/tss_/library/momentjs/moment.min.js"></script>
    <script type="text/javascript" src="../WebResources/tss_/library/lodash/lodash.min.js"></script>
    <script type="text/javascript" src="../WebResources/tss_/library/vue/vue.min.js"></script>
    <script type="text/javascript" src="../WebResources/tss_/library/buefy/buefy.min.js"></script>
    <script type="text/javascript" src="../WebResources/tss_/library/mscrmsdk/SDK.MetaData.js"></script>
    <script type="text/javascript" src="../WebResources/tss_/library/xrmservicetoolkit/xrmservicetoolkit.min.js"></script>
</head>
<body>
        <div id="app">
            <template>
                <section>
                    <b-tabs>
                        <b-input v-model="searchFilter" placeholder="Search Quotation Number..." icon="search"></b-input>
                            <b-table
                                :data="filteredTableData"
                                :checked-rows.sync="checkedRows"
                                :loading ="isLoading"
                                :paginated="true"
                                :per-page="5"
                                @dblclick="openEntity"
                                checkable
                                style="height:100%">
            
                                <template slot-scope="props">
                                    <b-table-column field="tss_quotationnumber" label="Quotation No" sortable>
                                        {{ props.row.tss_quotationnumber }}
                                    </b-table-column>
                                    <b-table-column field="tss_estimationclosedate" label="Estimation Close Date" sortable>
                                        {{ props.row.tss_estimationclosedate | datetime}}
                                    </b-table-column>
                                    <b-table-column field="tss_totalprice.Value" label="Total Price" numeric sortable>
                                        {{ props.row.tss_totalprice.Value | currency}}
                                    </b-table-column>
                                </template>
                                <template slot="empty">
                                    <section class="section">
                                        <div class="content has-text-grey has-text-centered" v-if="!isLoading">
                                            <p><b>No data obtained. Click <a @click="Start()">here</a> to retry.</b></p>
                                        </div>
                                    </section>
                                </template>
                            </b-table>
            
                    </b-tabs>
                </section>
            </template>
          </div>
          <script>
              Vue.use(Buefy.default, {
                  defaultIconPack: 'fa',
                  defaultContainerElement: 'app'
              });
              var App = new Vue({
                  el: '#app',
                  data: {
                      tableData: [
                      ],
                      checkedRows: [],
                      isLoading: false,
                      searchFilter: ""
                  },
                  computed: {
                      filteredTableData: function () {
                          if (this.tableData.length === 0) return [];
                          return _.filter(this.tableData,
                              function (data) {
                                  if (data.tss_quotationnumber)
                                      return data.tss_quotationnumber.indexOf(App.searchFilter) !== -1;
                                  return false;
                              });
                      }
                  },
                  methods: {
                      openEntity: function (entity) {
                          Xrm.Utility.openEntityForm("tss_quotationpartheader", entity.id, null,
                              {
                                  openInNewWindow: true
                              });
                      }
                  },
                  filters: {
                      currency: function (value, param, decimalPoint) {
                          if (value == "") return "";
                          if (Intl) {
                              var newValue = new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(value);
                              return newValue;
                          }
                          else {
                              var numberValue = parseFloat(value);
                              if (!decimalPoint)
                                  decimalPoint = 2;
                              if (!param)
                                  param = "Rp. ";
                              if (isNaN(numberValue))
                                  return "-";
                              else
                                  return param + " " + numberValue.toFixed(decimalPoint);
                          }
                      },
                      datetime: function (value) {
                          if (moment) {
                              return moment(value).local().format("MM/DD/YYYY");
                          }
                          return value;
                      }
                  }

              });


              function ResetGrid() {
                  App.tableData = [];
                  App.checkedRows = [];
              }
              //Debug version for now.
              var filterName = "*C MAJU SELALU";
              var retrieveAccountIdResult = function () {
                  return new Promise(function (resolve, reject) {
                      if (window.parent && window.parent.Xrm.Page.getAttribute("tss_customer") != null) {
                          if (window.parent.Xrm.Page.getAttribute("tss_customer").getValue() == null) {
                              ResetGrid();
                          }
                          resolve(window.parent.Xrm.Page.getAttribute("tss_customer").getValue()[0].id);
                      } else {
                          XrmServiceToolkit.Rest.RetrieveMultiple("AccountSet", "?$select=AccountId&$filter=Name eq '" + filterName + "'", function (results) {
                              var lastAccountId = "";
                              for (var i = 0; i < results.length; i++) {
                                  var accountId = results[i].AccountId;
                                  lastAccountId = accountId;
                              }
                              console.log(lastAccountId);
                              resolve(lastAccountId);
                          }, function (error) {
                              console.log(error);
                              reject(error);
                          }, function () {
                              //On Complete - Do Something
                          }, true);
                      }
                  });
              }

              var retrieveRelatedData = function (accountId) {
                  return new Promise(function (resolve, reject) {
                      App.tableData = [];
                      App.checkedRows = [];
                      XrmServiceToolkit.Rest.RetrieveMultiple("tss_quotationpartheaderSet", "?$select=tss_estimationclosedate,tss_quotationnumber,tss_quotationpartheaderId,tss_totalprice&$filter=tss_customer/Id eq (guid'" + accountId + "') and (tss_statuscode/Value ne 865920005 and tss_statuscode/Value ne 865920004)&$orderby=tss_quotationnumber asc", function (results) {
                          for (var i = 0; i < results.length; i++) {
                              var tss_estimationclosedate = results[i].tss_estimationclosedate;
                              var tss_quotationnumber = results[i].tss_quotationnumber;
                              var tss_quotationpartheaderId = results[i].tss_quotationpartheaderId;
                              var tss_totalprice = results[i].tss_totalprice;
                              App.tableData.push({
                                  id: tss_quotationpartheaderId,
                                  tss_totalprice: tss_totalprice,
                                  tss_quotationnumber: tss_quotationnumber,
                                  tss_estimationclosedate: tss_estimationclosedate
                              });
                          }
                          resolve(results);
                      }, function (error) {
                          console.log(error.message);
                          reject(error);
                      }, function () {
                          //On Complete - Do Something
                      }, true);
                  });
              }
              function InitializeMapping() {
                  return new Promise(function (resolve, reject) {
                      App.tableData = [
                          {
                              id: "",
                              tss_quotationnumber: "",
                              tss_totalprice: { Value: null },
                              tss_estimationclosedate: new Date()
                          }
                      ];
                      App.$forceUpdate();
                      setTimeout(function () { resolve() }, 1000);
                  });
              }

              var isStarted = false;
              function Start(count) {
                  if (count > 3) return;
                  if (count === "undefined" || count == null) count = 0;
                  App.isLoading = true;
                  isStarted = true;
                  InitializeMapping().then(retrieveAccountIdResult)
                  .then(retrieveRelatedData)
                  .catch(function (error) {
                      console.log(error);
                  })
                  .finally(function() {
                      App.isLoading = false;
                      if (App.tableData.length === 0) {
                          setTimeout(function () { Start(count + 1); }, 1500);//retry, maybe network issues.
                        }
                    });
              }
              if (window.parent && window.parent.Xrm && window.parent.Xrm.Page.getAttribute("tss_customer")) {
                  var parentXrm = window.parent.Xrm;
                  if (parentXrm && parentXrm.Page.getAttribute("tss_customer")) {
                      parentXrm.Page.getAttribute("tss_customer").addOnChange(function (reference) {
                          if (isStarted) {
                              Start();
                          }
                      });
                  }
              } else {
                  Start();
              }
          </script>
    </body>
</html> 