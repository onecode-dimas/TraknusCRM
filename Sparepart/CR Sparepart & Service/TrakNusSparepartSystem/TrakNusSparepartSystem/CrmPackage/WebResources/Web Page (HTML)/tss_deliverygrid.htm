<html>
    <head>
            <link rel="stylesheet" href="../WebResources/tss_/fonts/roboto/roboto_latin.css">
            <link rel="stylesheet" href="../WebResources/tss_/fonts/fontawesome/css/font_awesome.css">
            <link rel="stylesheet" href="../WebResources/tss_/library/buefy/buefy.min.css">
            <link rel="stylesheet" href="../WebResources/tss_gridsetting.css">
            <script type="text/javascript" src="../WebResources/ClientGlobalContext.js.aspx"></script>
            <script type="text/javascript" src="../WebResources/tss_/polyfill/babel_polyfill/polyfill.min.js"></script>
            <script type="text/javascript" src="../WebResources/tss_/library/bluebird/bluebird.min.js"></script>
            <script type="text/javascript" src="../WebResources/tss_/library/vue/vue.min.js"></script>
            <script type="text/javascript" src="../WebResources/tss_/library/lodash/lodash.min.js"></script>
            <script type="text/javascript" src="../WebResources/tss_/library/buefy/buefy.min.js"></script>
            <script type="text/javascript" src="../WebResources/tss_/library/mscrmsdk/SDK.MetaData.js"></script>
            <script type="text/javascript" src="../WebResources/tss_/library/xrmservicetoolkit/xrmservicetoolkit.min.js"></script>
    </head>
    <body>
        <div id="app">
            <template>
                <section>
                    <b-tabs>
                            <b-input v-model="searchFilter" placeholder="Search SO Number..." icon="search"></b-input>
                            <b-table
                                :data="filteredTableData"
                                :checked-rows.sync="checkedRows"
                                :loading="isLoading"
                                :paginated="true"
                                :per-page="5"

                                @dblclick="openEntity"
                                checkable
                                style="height:100%">
            
                                <template slot-scope="props">
                                    <b-table-column label="SO Number" sortable>
                                        {{ props.row.tss_sonumber }}
                                    </b-table-column>
            
                                    <b-table-column label="Delivery No" sortable>
                                        {{ props.row.tss_DeliveryNo}}
                                    </b-table-column>
            
                                </template>
                                <template slot="empty">
                                    <section class="section">
                                        <div class="content has-text-grey has-text-centered" v-if="!isLoading">
                                            <p><b>No data obtained. Click <a @click="Start()">here</a> to retry.</b></p>
                                        </div>
                                    </section>
                                </template>
                            </b-table>
            
                    </b-tabs>
                </section>
            </template>
          </div>
          <script>
              Vue.use(Buefy.default, {
                  defaultIconPack: 'fa',
                  defaultContainerElement: 'app'
              });
              var App = new Vue({
                  el: '#app',
                  data: {
                      tableData: [
                      ],
                      checkedRows: [],
                      optionSetMappingStatusReason: [],
                      isLoading: false,
                      searchFilter: ""
                  },
                  computed: {
                      filteredTableData: function () {
                          if (this.tableData.length === 0) return [];
                          return _.filter(this.tableData,
                              function (data) {
                                  if (data.tss_sonumber)
                                      return data.tss_sonumber.indexOf(App.searchFilter) !== -1;
                                  return false;
                              });
                      }
                  },
                  methods: {
                      openEntity: function (entity) {
                          Xrm.Utility.openEntityForm("tss_sopartheader", entity.tss_sopartheaderid, null,
                              {
                                  openInNewWindow: true
                              });
                      }
                  },
                  filters: {
                      currency: function (value, param, decimalPoint) {
                          if (value == "") return "";
                          if (Intl) {
                              var newValue = new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(value);
                              return newValue;
                          }
                          else {
                              var numberValue = parseFloat(value);
                              if (!decimalPoint)
                                  decimalPoint = 2;
                              if (!param)
                                  param = "Rp. ";
                              if (isNaN(numberValue))
                                  return "-";
                              else
                                  return param + " " + numberValue.toFixed(decimalPoint);
                          }
                      },
                      statusReasonFilter: function (value) {
                          for (var i = 0 ; i < App.optionSetMappingStatusReason.length; i++) {
                              if (App.optionSetMappingStatusReason[i].Key == value) {
                                  return App.optionSetMappingStatusReason[i].Value;
                              }
                          }
                          return "-";
                      }
                  }

              });

              var retrieveMetadataFunction = function () {
                  return new Promise(function (resolve, reject) {
                      SDK.Metadata.RetrieveAttribute("tss_sopartlines", "tss_Status", null, true, function (result) {
                          var metadata = [];
                          for (var i = 0; i < result.OptionSet.Options.length; i++) {
                              metadata.push({ Key: result.OptionSet.Options[i].Value, Value: result.OptionSet.Options[i].Label.LocalizedLabels[0].Label });
                          }
                          console.log(metadata);
                          resolve(metadata);
                      },
                      function (error) {
                          console.log(error);
                          reject(error);
                      }, null);
                  });
              }

              function ResetGrid() {
                  App.tableData = [];
                  App.checkedRows = [];
              }
              //Debug version for now.
              var filterName = "EVANS LESTARI, PT";
              var retrieveAccountIdResult = function () {
                  return new Promise(function (resolve, reject) {
                      if (window.parent && window.parent.Xrm && window.parent.Xrm.Page.getAttribute("tss_customer") != null) {
                          if (window.parent.Xrm.Page.getAttribute("tss_customer").getValue() == null) {
                              ResetGrid();
                          }
                          resolve(window.parent.Xrm.Page.getAttribute("tss_customer").getValue()[0].id);
                      } else {
                          XrmServiceToolkit.Rest.RetrieveMultiple("AccountSet", "?$select=AccountId&$filter=Name eq '" + filterName + "'", function (results) {
                              var lastAccountId = "";
                              for (var i = 0; i < results.length; i++) {
                                  var accountId = results[i].AccountId;
                                  lastAccountId = accountId;
                              }
                              console.log(lastAccountId);
                              resolve(lastAccountId);
                          }, function (error) {
                              console.log(error);
                              reject(error);
                          }, function () {
                              //On Complete - Do Something
                          }, true);
                      }
                  });
              }

              var retrieveRelatedData = function (accountId) {
                  return new Promise(function (resolve, reject) {
                      App.tableData = [];
                      App.checkedRows = [];
                      var valueArr = [];
                      XrmServiceToolkit.Rest.RetrieveMultiple("tss_sopartlinesSet", "?$select=tss_sopartlinesId,tss_tss_sopartheader_tss_sopartlines/tss_Customer,tss_Status,tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines/tss_DeliveryNo,tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines/tss_InvoiceNo,tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines/tss_InvoiceValue,tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines/tss_salesorderpartsublinesId,tss_tss_sopartheader_tss_sopartlines/tss_sonumber,tss_tss_sopartheader_tss_sopartlines/tss_sopartheaderId&$expand=tss_tss_sopartheader_tss_sopartlines,tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines", function (results) {
                          for (var i = 0; i < results.length; i++) {
                              var tss_sopartlinesId = results[i].tss_sopartlinesId;
                              var tss_Customer = results[i].tss_tss_sopartheader_tss_sopartlines.tss_Customer;
                              if (!XrmServiceToolkit.Common.GuidsAreEqual(tss_Customer.Id, accountId)) continue;
                              var tss_Status = results[i].tss_Status;
                              var tryFindDelivered = _.find(App.optionSetMappingStatusReason,
                                  function (data) {
                                      return data.Key === tss_Status.Value;
                                  });
                              if (tryFindDelivered === "undefined" || tryFindDelivered == null) continue;
                              if (tryFindDelivered.Value !== "Delivered") continue;
                              var tss_tss_sopartheader_tss_sopartlines_tss_sonumber = results[i].tss_tss_sopartheader_tss_sopartlines.tss_sonumber;
                              var tss_tss_sopartheader_tss_sopartlines_tss_sopartheaderId = results[i].tss_tss_sopartheader_tss_sopartlines.tss_sopartheaderId;
                              
                              for (var a = 0; a < results[i].tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines.results.length; a++) {
                                  var tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_DeliveryNo = results[i].tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines.results[a].tss_DeliveryNo;
                                  var tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_InvoiceNo = results[i].tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines.results[a].tss_InvoiceNo;
                                  var tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_InvoiceValue = results[i].tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines.results[a].tss_InvoiceValue;
                                  var tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_salesorderpartsublinesId = results[i].tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines.results[a].tss_salesorderpartsublinesId;

                                  if (
                                      tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_DeliveryNo ==
                                          null) continue;
                                  if (_.filter(valueArr,
                                          function(data) {
                                              return data ===
                                                  tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_DeliveryNo;
                                          }).length >
                                      0) continue;

                                  valueArr.push(
                                      tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_DeliveryNo);

                                  App.tableData.push({
                                      id: tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_salesorderpartsublinesId,
                                      tss_sonumber: tss_tss_sopartheader_tss_sopartlines_tss_sonumber,
                                      tss_sopartheaderid : tss_tss_sopartheader_tss_sopartlines_tss_sopartheaderId,
                                      tss_Status: tss_Status,
                                      tss_DeliveryNo: tss_tss_sopartlines_tss_salesorderpartsublines_SalesOrderPartLines_tss_DeliveryNo
                                  });
                              }
                          }
                      }, function (error) {
                          reject(error);
                      }, function () {
                          //On Complete - Do Something
                          resolve();
                      }, true);

                  });
              }
              var isStarted = false;

              function InitializeMapping() {
                  return new Promise(function (resolve, reject) {
                      App.tableData = [
                          {
                              id: "",
                              tss_sonumber: "",
                              tss_DeliveryNo: "",
                              tss_Status: { Value: 0 }
                          }
                      ];
                      App.$forceUpdate();
                      setTimeout(function () { resolve() }, 1000);
                  });
              }

              function Start(count) {
                  try {
                      if (count > 3) return;
                      if (count === "undefined" || count == null) count = 0;
                      App.isLoading = true;
                      InitializeMapping().then(retrieveMetadataFunction)
                          .then(function (result) {
                              App.optionSetMappingStatusReason = result;
                          })
                          .then(retrieveAccountIdResult)
                          .then(retrieveRelatedData)
                          .catch(function (error) {
                              console.log(error);
                          })
                          .finally(function () {
                              App.isLoading = false;
                              if (App.tableData.length === 0) {
                                  setTimeout(function () { Start(count + 1); }, 1500);//retry, maybe network issues.
                              }
                          });
                      isStarted = true;
                  } catch (e) {
                      setTimeout(function () { Start(count + 1); }, 1500);//retry, maybe network issues.
                      console.log(e.message);
                  }
                  
              }

              if (window.parent && window.parent.Xrm && window.parent.Xrm.Page.getAttribute("tss_customer")) {
                  var parentXrm = window.parent.Xrm;
                  if (parentXrm && parentXrm.Page.getAttribute("tss_customer")) {
                      parentXrm.Page.getAttribute("tss_customer").addOnChange(function (reference) {
                          if (isStarted) {
                              Start();
                          }
                      });
                  }
              } else {
                  Start();
              }
          </script>
    </body>
</html> 