// <copyright file="PreMatrixTyreConsumpCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>8/16/2018 2:41:50 PM</date>
// <summary>Implements the PreMatrixTyreConsumpCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace TrakNusSparepartSystem.Plugins
{
    using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
    using Plugins.BusinessLayer;
    /// <summary>
    /// PreMatrixTyreConsumpCreate Plugin.
    /// </summary>    
    public class PreMatrixTyreConsumpCreate: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMatrixTyreConsumpCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecure) configuration information.</param>
        /// <param name="secure">Contains non-public (secure) configuration information. 
        /// When using Microsoft Dynamics CRM for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreMatrixTyreConsumpCreate(string unsecure, string secure)
            : base(typeof(PreMatrixTyreConsumpCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(10, "Create", "tss_matrixtyreconsump", new Action<LocalPluginContext>(ExecutePreMatrixTyreConsumpCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.


           // TODO: Implement your custom configuration handling.
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreMatrixTyreConsumpCreate"/> class.
        /// </summary>
        public PreMatrixTyreConsumpCreate()
            : base(typeof(PreMatrixTyreConsumpCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(10, "Create", "tss_matrixtyreconsump", new Action<LocalPluginContext>(ExecutePreMatrixTyreConsumpCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreMatrixTyreConsumpCreate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }
            IOrganizationService organizationService = localContext.OrganizationService;
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            ITracingService tracer = localContext.TracingService;
            Entity entity = (Entity)context.InputParameters["Target"];

            BL_tss_matrixtyreconsump bl_tss_matrixtyreconsump = new BL_tss_matrixtyreconsump();
            bl_tss_matrixtyreconsump.Form_OnCreate_PreOperation(organizationService, context, entity, tracer);
            // TODO: Implement your custom Plug-in business logic.
        }
    }
}
